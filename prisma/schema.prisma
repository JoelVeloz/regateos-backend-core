generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  icon       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  merchantId String
  status     String    @default("active")
  merchant   Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  products   Product[]

  @@map("category")
}

model Product {
  id              String   @id @default(uuid())
  name            String
  price           Decimal  @default(0) @db.Decimal(10, 2)
  description     String?
  categoryId      String
  merchantId      String
  discountPercent Decimal? @default(0) @db.Decimal(5, 2)
  discountFixed   Decimal? @default(0) @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  status          String   @default("active")
  images          File[]
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  merchant        Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("product")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  image         String?
  accounts      Account[]
  merchant      Merchant?
  sessions      Session[]

  @@map("user")
}

model Merchant {
  id                String     @id @default(uuid())
  userId            String     @unique
  verified          Boolean    @default(false)
  businessName      String?
  businessAddress   String?
  nationalId        String?
  city              String?
  phone             String?
  businessLogoId    String?
  nationalIdImageId String?
  storeFrontImageId String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now()) @updatedAt
  businessLogo      File?      @relation("BusinessLogo", fields: [businessLogoId], references: [id])
  nationalIdImage   File?      @relation("NationalIdImage", fields: [nationalIdImageId], references: [id])
  storeFrontImage   File?      @relation("StoreFrontImage", fields: [storeFrontImageId], references: [id])
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products          Product[]
  categories        Category[]

  @@map("merchant")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model File {
  id                       String     @id @default(uuid())
  filename                 String
  originalName             String
  path                     String
  url                      String
  provider                 String
  mimeType                 String
  size                     Int
  productId                String?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @default(now()) @updatedAt
  product                  Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  businessLogoMerchants    Merchant[] @relation("BusinessLogo")
  nationalIdImageMerchants Merchant[] @relation("NationalIdImage")
  storeFrontImageMerchants Merchant[] @relation("StoreFrontImage")

  @@map("file")
}
